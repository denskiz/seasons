{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","season","lat","month","getSeason","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAGMA,EAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,mBACNC,SAAU,cAwBCE,EAbO,SAACC,GACrB,IAAMC,EARU,SAACC,EAAKC,GACrB,GAAIA,EAAQ,GAAKA,EAAQ,EAEvB,OAAOD,EAAM,EAAI,SAAW,SAKhBE,CAAUJ,EAAME,KAAK,IAAIG,MAAOC,YAC/C,EAA2BZ,EAAaO,GAAhCL,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAEd,OACE,sBAAKU,UAAS,yBAAoBN,GAAlC,UACE,mBAAGM,UAAS,4BAAuBV,EAAvB,WACZ,6BAAKD,IACL,mBAAGW,UAAS,6BAAwBV,EAAxB,eC3BZW,EAAU,SAAAR,GACd,OACE,qBAAKO,UAAU,mBAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCP,EAAMS,aAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCTTG,E,4MACJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,uDAEnC,WAAqB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2BAI7C,WACE,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,0CAAaqB,KAAKX,MAAMC,iBAG5BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGjC,cAAC,EAAD,CAASO,QAAQ,qC,oBAG1B,WACE,OAAO,qBAAKF,UAAU,aAAf,SAA6BgB,KAAKC,sB,GAvB3BC,IAAMC,WA2BxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.f967dc47.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: \"sun\",\n  },\n  winter: {\n    text: \"Burr it is cold!\",\n    iconName: \"snowflake\",\n  },\n};\n\nconst getSeason = (lat, month) => {\n   if (month > 2 && month < 9) {\n     // if lat is greater than 0 we must be in northern hemishere\n     return lat > 0 ? \"summer\" : \"winter\";\n   }\n};\n\nconst SeasonDisplay = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: '' };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }),\n      err => this.setState({ errorMessage: err.message })\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n\n    return <Spinner message=\"Please accept location request\" />;\n  }\n\n  render() {\n    return <div className=\"border red\">{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}